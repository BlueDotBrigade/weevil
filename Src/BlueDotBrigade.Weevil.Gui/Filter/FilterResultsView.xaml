<UserControl x:Class="BlueDotBrigade.Weevil.Gui.Filter.FilterResultsView"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
            xmlns:dd="urn:gong-wpf-dragdrop"
            xmlns:documents="clr-namespace:BlueDotBrigade.Weevil.Windows.Documents;assembly=BlueDotBrigade.Weevil.Windows"
            xmlns:converters="clr-namespace:BlueDotBrigade.Weevil.Gui.Converters"
            xmlns:controls="clr-namespace:BlueDotBrigade.Weevil.Windows.Controls;assembly=BlueDotBrigade.Weevil.Windows"
            xmlns:system="clr-namespace:System;assembly=mscorlib"
            xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
            xmlns:guiControls="clr-namespace:BlueDotBrigade.Weevil.Gui.Controls"
            xmlns:data="clr-namespace:BlueDotBrigade.Weevil.Data;assembly=BlueDotBrigade.Weevil.Common"
            xmlns:converters1="clr-namespace:BlueDotBrigade.Weevil.Windows.Converters;assembly=BlueDotBrigade.Weevil.Windows"
            mc:Ignorable="d"
            d:DesignHeight="200" d:DesignWidth="900">
   <UserControl.Resources>
      <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
      <converters:SeverityToBackgroundConverter x:Key="SeverityBackgroundConverter" />
      <converters:SeverityToForegroundConverter x:Key="SeverityForegroundConverter" />
      <converters:TimeSpanConverter x:Key="TimeSpanConverter" />
      <converters:FilterMultiValueConverter x:Key="FiltersMultiValueConverter" />
      <converters:ContentConverter x:Key="ContentConverter" />
      <converters1:ContextConverter x:Key="ContextConverter" />
      <converters:CheckBoxValidationErrorConverter x:Key="CheckBoxValidationErrorConverter" />
      <Style x:Key="CommandMenuItemStyle"
               TargetType="{x:Type MenuItem}">
         <Setter Property="Header"
                   Value="{Binding Path=DisplayText}"/>
         <Setter Property="Command"
                   Value="{Binding Path=Command}"/>
         <Setter Property="CommandParameter"
                   Value="{Binding Path=CommandParameter}"/>
      </Style>
   </UserControl.Resources>
   <UserControl.InputBindings>
      <KeyBinding Key="O" Modifiers="Control" Command="{Binding OpenCommand}" />
      <KeyBinding Key="F1" Command="{Binding ShowHelpCommand}" />
      <KeyBinding Key="F1" Modifiers="Control" Command="{Binding ShowAboutCommand}" />
      <KeyBinding Key="S" Modifiers="Control" Command="{Binding SaveStateCommand}" />
      <KeyBinding Key="S" Modifiers="Control+Shift" Command="{Binding SaveSelectedAsRawCommand}" />
      <KeyBinding Key="F12" Modifiers="Ctrl+Alt+Shift" Command="{Binding ForceGarbageCollectionCommand}" />

      <KeyBinding Key="F" Modifiers="Ctrl" Command="{Binding FindTextCommand}" />
      <KeyBinding Key="F3" Command="{Binding FindNextCommand}" />
      <KeyBinding Key="F3" Modifiers="Shift" Command="{Binding FindPreviousCommand}" />
      <KeyBinding Key="G" Modifiers="Ctrl" Command="{Binding GoToCommand}" />

      <KeyBinding Key="C" Modifiers="Control" Command="{Binding ClipboardCopySimpleCallStackCommand}" />
      <KeyBinding Key="C" Modifiers="Control+Shift" Command="{Binding ClipboardCopyCommentCommand}" />
      <KeyBinding Key="V" Modifiers="Control" Command="{Binding ClipboardPasteCommand}" />
      <KeyBinding Key="V" Modifiers="Control+Shift" Command="{Binding ClipboardPasteOverwriteCommand}" />
      <KeyBinding Key="F5" Command="{Binding ReApplyFiltersCommand}" />
      <KeyBinding Key="O" Modifiers="Control+Shift" Command="{Binding ToggleFilterOptionsVisibilityCommand}" />
      <KeyBinding Key="T" Modifiers="Control" Command="{Binding ToggleFiltersCommand}" />
      <KeyBinding Key="D" Modifiers="Control" Command="{Binding ShowDashboardCommand}" />
      <KeyBinding Key="E" Modifiers="Control" Command="{Binding ShowFileExplorerCommand}" />
      <KeyBinding Key="R" Modifiers="Control" Command="{Binding ShowRegExToolCommand}" />
      <KeyBinding Key="OemTilde" Modifiers="Control" Command="{Binding ShowApplicationLogFileCommand}" />
      <KeyBinding Key="Escape" Command="{Binding AbortFilterCommand}" />
      <!--<KeyBinding Key="Delete" Command="{Binding ClearSelectedRecordsCommand}" />-->
      <KeyBinding Key="Back" Command="{Binding RemoveSelectedCommentsCommand}" />
      <KeyBinding Key="Back" Modifiers="Control+Shift"  Command="{Binding RemoveAllCommentsCommand}" />

      <KeyBinding Key="OemTilde" Modifiers="Control+Shift"  Command="{Binding SplitCurrentLogCommand}" />

      <KeyBinding Key="F5" Modifiers="Control" Command="{Binding ReloadCommand}" />

      <KeyBinding Key="F8" Command="{Binding DetectDataCommand}" />
      <KeyBinding Key="F9" Command="{Binding DetectDataTransitionsCommand}" />
      <KeyBinding Key="F10" Command="{Binding DetectTimeGapUiOnlyCommand}" />
      <KeyBinding Key="F11" Command="{Binding DetectTimeGapCommand}" />

      <KeyBinding Key="P" Modifiers="Control" Command="{Binding ToggleIsPinnedCommand}"/>
      <KeyBinding Key="Subtract" Modifiers="Control" Command="{Binding GoToPreviousPinCommand}" />
      <KeyBinding Key="Add" Modifiers="Control" Command="{Binding GoToNextPinCommand}" />
      <KeyBinding Key="OemMinus" Modifiers="Control" Command="{Binding GoToPreviousPinCommand}" />
      <KeyBinding Key="OemPlus" Modifiers="Control" Command="{Binding GoToNextPinCommand}" />
   </UserControl.InputBindings>
   <Grid x:Name="WindowLayout" dd:DragDrop.IsDropTarget="True" dd:DragDrop.DropHandler="{Binding}"
         FocusManager.FocusedElement="{Binding ElementName=OpenButton}">
      <Grid.RowDefinitions>
         <RowDefinition Height="Auto"/>
         <RowDefinition Height="*" />
         <RowDefinition Height="Auto" />
         <RowDefinition Height="Auto" />
         <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
         <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <Grid x:Name="FilterToolboxLayout" Grid.Row="0" >
         <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
         </Grid.RowDefinitions>
         <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
         </Grid.ColumnDefinitions>

         <Button x:Name="OpenButton" Grid.Column="0"
                 Command="{Binding OpenCommand}"
                 ToolTip="Open a new document. (Ctrl+O)"
                 Style="{StaticResource  MaterialDesignRaisedButton}"
            Margin="{StaticResource ButtonMargin}">
            <Image  HorizontalAlignment="Left" Height="24" VerticalAlignment="Top" Width="24" Source="/Resources/Icons/OpenDocument-Button-24.png"/>
         </Button>
         <!-- 
         HACK: WPF ComboBoxes do not support access keys. The `Label` is being used to receive focus on behalf of the ComboBox. See: #36
         -->
         <Label Grid.Column="1" Target="{Binding ElementName=InclusiveFilter}" Content="AccessKey hack for: _Inclusive ComboBox" Width="0"/>
         <ComboBox x:Name="InclusiveFilter" Grid.Column="1" 
                   Margin="{StaticResource ComboBoxMargin}"
                   ItemsSource="{Binding InclusiveFilterHistory}"
                   Text="{Binding InclusiveFilter, Delay=1500, UpdateSourceTrigger=PropertyChanged}" 
                   SelectedValue="{Binding InclusiveFilter}" 
                   IsEnabled="{Binding IsFilterToolboxEnabled}" 
                   IsEditable="True"
                   IsTextSearchEnabled="False"
                   StaysOpenOnEdit="False"
                   guiControls:MdixComboBoxBehavior.UseMicrosoftBehavior="True"
                   materialDesign:HintAssist.Hint="Inclusive Filter (Alt+I)"
                   materialDesign:TextFieldAssist.HasClearButton="True">
            <ComboBox.InputBindings>
               <KeyBinding Key="Enter" Command="{Binding FilterManuallyCommand}">
                  <KeyBinding.CommandParameter>
                     <MultiBinding Converter="{StaticResource FiltersMultiValueConverter}">
                        <Binding ElementName="InclusiveFilter" Path="Text" />
                        <Binding ElementName="ExclusiveFilter" Path="Text" />
                     </MultiBinding>
                  </KeyBinding.CommandParameter>
               </KeyBinding>
            </ComboBox.InputBindings>
         </ComboBox>
         <!-- 
         HACK: WPF ComboBoxes do not support access keys. The `Label` is being used to receive focus on behalf of the ComboBox. See: #36
         -->
         <Label Grid.Column="1" Target="{Binding ElementName=ExclusiveFilter}" Content="AccessKey hack for: _Exclusive ComboBox" Width="0"/>
         <ComboBox x:Name="ExclusiveFilter" Grid.Column="2"   
                   Margin="{StaticResource ComboBoxMargin}"
                   ItemsSource="{Binding ExclusiveFilterHistory}"
                   Text="{Binding ExclusiveFilter, Delay=1500, UpdateSourceTrigger=PropertyChanged}" 
                   SelectedValue="{Binding ExclusiveFilter}" 
                   IsEnabled="{Binding IsFilterToolboxEnabled}" 
                   IsEditable="True"
                   IsTextSearchEnabled="False"
                   StaysOpenOnEdit="False"
                   guiControls:MdixComboBoxBehavior.UseMicrosoftBehavior="True"
                   materialDesign:HintAssist.Hint="Exclusive filter (Alt+E)"
                   materialDesign:TextFieldAssist.HasClearButton="True">
            <ComboBox.InputBindings>
               <KeyBinding Key="Enter" Command="{Binding FilterManuallyCommand}">
                  <KeyBinding.CommandParameter>
                     <MultiBinding Converter="{StaticResource FiltersMultiValueConverter}">
                        <Binding ElementName="InclusiveFilter" Path="Text" />
                        <Binding ElementName="ExclusiveFilter" Path="Text" />
                     </MultiBinding>
                  </KeyBinding.CommandParameter>
               </KeyBinding>
            </ComboBox.InputBindings>
         </ComboBox>
         <ToggleButton  Name="FilterOptionsButton" Grid.Column="3" ToolTip="Show filter options... (Ctrl+Shift+O)" 
                        IsChecked="{Binding AreFilterOptionsVisible, Mode=TwoWay}"
                        IsEnabled="{Binding IsFilterToolboxEnabled}" />
         <Button Grid.Column="4"
                 Command="{Binding FilterOrCancelCommand}"
                 Style="{StaticResource  MaterialDesignRaisedButton}"
                 Margin="{StaticResource ButtonMargin}"
                 IsEnabled="{Binding IsFilterToolboxEnabled}" >
            <StackPanel>
               <Image Height="24">
                  <Image.Style>
                     <Style TargetType="{x:Type Image}">
                        <Setter Property="ToolTip" Value="Apply inclusive &amp; exclusive filters."/>
                        <Setter Property="Source" Value="/Resources/Icons/Filter-24.png"/>
                        <Style.Triggers>
                           <DataTrigger Binding="{Binding IsProcessingLongOperation}" Value="true">
                              <Setter Property="ToolTip" Value="Cancel filter operation. (Esc)"/>
                              <Setter Property="Source" Value="/Resources/Icons/FilterCancel-24.png"/>
                           </DataTrigger>
                        </Style.Triggers>
                     </Style>
                  </Image.Style>
               </Image>
            </StackPanel>
            <Button.CommandParameter>
               <MultiBinding Converter="{StaticResource FiltersMultiValueConverter}">
                  <Binding ElementName="InclusiveFilter" Path="Text" />
                  <Binding ElementName="ExclusiveFilter" Path="Text" />
               </MultiBinding>
            </Button.CommandParameter>
         </Button>
      </Grid>
      <ListView x:Name="ListView"
                Grid.Row="1"
                FontSize="{StaticResource TextFontSize}"
                ItemsSource="{Binding VisibleItems}"
                             SelectedIndex="{Binding ActiveRecordIndex, Mode=TwoWay}"
                             AlternationCount="2"
                             IsSynchronizedWithCurrentItem="True" 
                             SelectionChanged="ListView_OnSelectionChanged" 
                             SelectionMode="Extended" 
                             controls:ListViewBehavior.AutoScrollToCurrentItem="True">
         <ListView.Resources>
            <Thickness x:Key="ColumnHeaderPadding" Left="4" Top="4" Right="4" Bottom="4" />
         </ListView.Resources>
         <ListView.InputBindings>
            <KeyBinding Key="V" Modifiers="Ctrl" Command="{Binding ClipboardPasteCommand}" />
            <KeyBinding Key="V" Modifiers="Control+Shift" Command="{Binding ClipboardPasteOverwriteCommand}" />
         </ListView.InputBindings>
         <ListView.Style>
            <Style TargetType="ListView" BasedOn="{StaticResource MaterialDesignListView}">
               <Style.Triggers>
                  <DataTrigger Binding="{Binding IsProcessingLongOperation}" Value="True">
                     <Setter Property="Visibility" Value="Collapsed" />
                  </DataTrigger>
               </Style.Triggers>
            </Style>
         </ListView.Style>
         <ListView.ContextMenu>
            <ContextMenu  FontSize="{StaticResource TextFontSize}">
               <MenuItem Header="Open" Command="{Binding OpenCommand}" InputGestureText="Ctrl+O"/>
               <MenuItem Header="Save State" Command="{Binding SaveStateCommand}" InputGestureText="Ctrl+S"/>
               <MenuItem Header="Save Records...">
                  <MenuItem Header="Raw Data" Command="{Binding SaveSelectedAsRawCommand}" InputGestureText="Ctrl+Shift+S" />
                  <MenuItem Header="With Metadata" Command="{Binding SaveSelectedAsTsvCommand}" />
                  <Separator/>
                  <MenuItem Header="Comment Summary" Command="{Binding SaveCommentSummaryCommand}" />
               </MenuItem>
               <Separator/>
               <MenuItem Header="Show...">
                  <MenuItem Header="Dashboard" Command="{Binding ShowDashboardCommand}" InputGestureText="Ctrl+D" />
                  <MenuItem Header="Regular Expression Tool" Command="{Binding ShowRegExToolCommand}" InputGestureText="Ctrl+R" />
                  <MenuItem Header="Windows File Explorer" Command="{Binding ShowFileExplorerCommand}" InputGestureText="Ctrl+E" />
               </MenuItem>
               <Separator/>
               <MenuItem Header="Copy &amp; Paste...">
                  <MenuItem Header="Copy Records" Command="{Binding ClipboardCopySimpleCallStackCommand}" InputGestureText="Ctrl+C" />
                  <MenuItem Header="Copy Records (Raw)" Command="{Binding ClipboardCopyRawCommand}" />
                  <MenuItem Header="Copy Comments" Command="{Binding ClipboardCopyCommentCommand}" InputGestureText="Ctrl+Shift+C" />
                  <Separator/>
                  <MenuItem Header="Paste Comments" Command="{Binding ClipboardPasteCommand}" InputGestureText="Ctrl+V" />
                  <MenuItem Header="Overwrite Comments" Command="{Binding ClipboardPasteOverwriteCommand}" InputGestureText="Ctrl+Shift+V" />
               </MenuItem>
               <Separator/>
               <MenuItem Header="Filtering...">
                  <MenuItem Header="Toggle Filters On/Off" Command="{Binding ToggleFiltersCommand}" InputGestureText="Ctrl+T" />
                  <Separator/>
                  <MenuItem Header="Re-Apply Filters" Command="{Binding ReApplyFiltersCommand}" InputGestureText="F5" />
               </MenuItem>
               <Separator/>
               <MenuItem Header="Clear...">
                  <MenuItem Header="Before Selected Record" Command="{Binding ClearBeforeSelectedRecordCommand}" />
                  <MenuItem Header="Before &#38; After Selection" Command="{Binding ClearBeforeAndAfterSelectionCommand}" />
                  <MenuItem Header="Between Selected Records" Command="{Binding ClearBetweenSelectedRecordsCommand}" />
                  <MenuItem Header="After Selected Record" Command="{Binding ClearAfterSelectedRecordCommand}" />
                  <Separator/>
                  <MenuItem Header="Selected Comments" Command="{Binding RemoveSelectedCommentsCommand}" InputGestureText="Back" />
                  <MenuItem Header="All Comments" Command="{Binding RemoveAllCommentsCommand}" InputGestureText="Ctrl+Shift+Back"/>
               </MenuItem>
               <Separator/>
               <MenuItem Header="Reload " Command="{Binding ReloadCommand}" InputGestureText="Ctrl+F5" />
               <Separator/>
               <MenuItem Header="Navigation...">
                  <MenuItem Header="Find" Command="{Binding FindTextCommand}" InputGestureText="Ctrl+F" />
                  <MenuItem Header="Find Next" Command="{Binding FindNextCommand}" InputGestureText="F3" />
                  <MenuItem Header="Find Previous" Command="{Binding FindPreviousCommand}" InputGestureText="Shift+F3" />
                  <Separator/>
                  <MenuItem Header="Go To" Command="{Binding GoToCommand}" InputGestureText="Ctrl+G" />
                  <Separator/>
                  <MenuItem Header="Previous Pinned" Command="{Binding GoToPreviousPinCommand}" InputGestureText="Ctrl+Minus" />
                  <MenuItem Header="Next Pinned" Command="{Binding GoToNextPinCommand}" InputGestureText="Ctrl+Plus" />
                  <MenuItem Header="Toggle Pin On/Off" Command="{Binding ToggleIsPinnedCommand}" InputGestureText="Ctrl+P" />
                  <MenuItem Header="Unpin All" Command="{Binding UnpinAllCommand}" />
               </MenuItem>
               <Separator/>
               <MenuItem Header="Analyzers...">
                  <MenuItem Header="Detect Data" Command="{Binding DetectDataCommand}" InputGestureText="F8"  />
                  <MenuItem Header="Detect Data Transitions" Command="{Binding DetectDataTransitionsCommand}" InputGestureText="F9" />
                  <MenuItem Header="Detect Rising Edges" Command="{Binding DataTransitionsRisingEdgeCommand}" />
                  <MenuItem Header="Detect Falling Edges" Command="{Binding DataTransitionsFallingEdgeCommand}" />
                  <Separator/>
                  <MenuItem Header="Detect Time Gap (UI Only)" Command="{Binding DetectTimeGapUiOnlyCommand}" InputGestureText="F10" />
                  <MenuItem Header="Detect Time Gap" Command="{Binding DetectTimeGapCommand}" InputGestureText="F11" />
               </MenuItem>
               <MenuItem Header="Custom Analyzers..."
                              ItemsSource="{Binding Path=CustomAnalyzerCommands}"
                              ItemContainerStyle="{StaticResource CommandMenuItemStyle}">
                  <MenuItem.Style>
                     <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MaterialDesignMenuItem}">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Setter Property="IsEnabled" Value="True"/>
                        <Style.Triggers>
                           <DataTrigger Binding="{Binding CustomAnalyzerCommands.Count}" Value="0">
                              <Setter Property="Visibility" Value="Collapsed"/>
                              <Setter Property="IsEnabled" Value="False"/>
                           </DataTrigger>
                        </Style.Triggers>
                     </Style>
                  </MenuItem.Style>
               </MenuItem>
               <MenuItem Header="Remove Flags" Command="{Binding RemoveAllFlagsCommand}"/>
               <Separator/>
               <MenuItem Header="Help" Command="{Binding ShowHelpCommand}" InputGestureText="F1" />
               <MenuItem Header="About" Command="{Binding ShowAboutCommand}" InputGestureText="Ctrl+F1" />
            </ContextMenu>
         </ListView.ContextMenu>
         <ListView.ItemContainerStyle>
            <Style TargetType="ListViewItem">
               <Setter Property="SnapsToDevicePixels" Value="True" />
               <Setter Property="OverridesDefaultStyle" Value="True" />
               <Setter Property="Background" Value="Transparent" />
               <Setter Property="BorderBrush" Value="Transparent" />
               <Setter Property="Template">
                  <Setter.Value>
                     <ControlTemplate TargetType="ListBoxItem">
                        <Border x:Name="Border"
                            
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource MaterialDesignDivider}"
                                BorderThickness="0,0,0,1"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                           <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                     </ControlTemplate>
                  </Setter.Value>
               </Setter>
               <Style.Triggers>
                  <Trigger Property="IsKeyboardFocusWithin" Value="True">
                     <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
                  </Trigger>
                  <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                     <Setter Property="Foreground" Value="{Binding Severity, Converter={StaticResource SeverityForegroundConverter}, FallbackValue={StaticResource MaterialDesignBody}, Mode=OneWay}"/>
                     <Setter Property="Background" Value="{Binding Severity, Converter={StaticResource SeverityBackgroundConverter}, FallbackValue={StaticResource MaterialDesignDivider}, Mode=OneWay}"/>
                  </Trigger>
                  <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                     <Setter Property="Foreground" Value="{Binding Severity, Converter={StaticResource SeverityForegroundConverter}, FallbackValue={StaticResource MaterialDesignBody}, Mode=OneWay}"/>
                     <Setter Property="Background" Value="{Binding Severity, Converter={StaticResource SeverityBackgroundConverter}, FallbackValue=Transparent, Mode=OneWay}"/>
                  </Trigger>

                  <Trigger Property="IsSelected" Value="True">
                     <Setter Property="Foreground" Value="WhiteSmoke"/>
                     <Setter Property="Background" Value="Black"/>
                  </Trigger>
               </Style.Triggers>
            </Style>
         </ListView.ItemContainerStyle>
         <ListView.View>
            <GridView>
               <GridViewColumn Width="70">
                  <GridViewColumnHeader Content="Line" Padding="{StaticResource ColumnHeaderPadding}"/>
                  <GridViewColumn.CellTemplate>
                     <DataTemplate DataType="data:IRecord">
                        <TextBlock Text="{Binding LineNumber, StringFormat={}{0:###,###,##0}}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
                     </DataTemplate>
                  </GridViewColumn.CellTemplate>
               </GridViewColumn>
               <GridViewColumn  Width="55">
                  <GridViewColumnHeader Content="Flagged" Padding="{StaticResource ColumnHeaderPadding}"/>
                  <GridViewColumn.CellTemplate>
                     <DataTemplate DataType="data:IRecord">
                        <CheckBox IsChecked="{Binding Path=Metadata.IsFlagged, TargetNullValue=false}" IsEnabled="False" HorizontalAlignment="Center"/>
                     </DataTemplate>
                  </GridViewColumn.CellTemplate>
               </GridViewColumn>
               <GridViewColumn Width="50">
                  <GridViewColumnHeader Content="Pinned" Padding="{StaticResource ColumnHeaderPadding}"/>
                  <GridViewColumn.CellTemplate>
                     <DataTemplate DataType="data:IRecord">
                        <CheckBox IsChecked="{Binding Path=Metadata.IsPinned, TargetNullValue=false, Converter={StaticResource CheckBoxValidationErrorConverter}}"  HorizontalAlignment="Center"/>
                     </DataTemplate>
                  </GridViewColumn.CellTemplate>
               </GridViewColumn>
               <GridViewColumn  Width="170">
                  <GridViewColumnHeader Content="Comment" Padding="{StaticResource ColumnHeaderPadding}"/>
                  <GridViewColumn.CellTemplate>
                     <DataTemplate DataType="data:IRecord">
                        <TextBox 
                                    Text="{Binding Path=Metadata.Comment, Mode=TwoWay, Delay=250, UpdateSourceTrigger=PropertyChanged, TargetNullValue={x:Static system:String.Empty}}"
                                    IsEnabled="True" 
                                    MinWidth="150"
                                    TextWrapping="Wrap" 
                                                controls:TextBoxBehavior.AutoSelectEnabled="True">
                        </TextBox>
                     </DataTemplate>
                  </GridViewColumn.CellTemplate>
               </GridViewColumn>
               <GridViewColumn  Width="55">
                  <GridViewColumnHeader Content="Elapsed" Padding="{StaticResource ColumnHeaderPadding}"/>
                  <GridViewColumn.CellTemplate>
                     <DataTemplate DataType="data:IRecord">
                        <TextBlock 
                                    Text="{Binding Metadata.ElapsedTime, Converter={StaticResource TimeSpanConverter}}"
                                    TextAlignment="Right">
                        </TextBlock>
                     </DataTemplate>
                  </GridViewColumn.CellTemplate>
               </GridViewColumn>
               <GridViewColumn  Width="1100">
                  <GridViewColumnHeader Content="Content" Padding="{StaticResource ColumnHeaderPadding}"/>
                  <GridViewColumn.CellTemplate>
                     <DataTemplate DataType="data:IRecord">
                        <TextBlock TextWrapping="WrapWithOverflow" HorizontalAlignment="Right"
                                    Text="{Binding Mode=OneWay, Converter={StaticResource ContentConverter}}">
                        </TextBlock>
                     </DataTemplate>
                  </GridViewColumn.CellTemplate>
               </GridViewColumn>
            </GridView>
         </ListView.View>
      </ListView>
      <StackPanel Grid.Row="1"
                  Visibility="{Binding IsProcessingLongOperation, Converter={StaticResource BooleanToVisibilityConverter}}"
                  VerticalAlignment="Center" HorizontalAlignment="Center" >
         <TextBlock Text="Boring log file for tasty bytes..." />
         <ProgressBar Width="200" Height="15" Foreground="LightSkyBlue" BorderBrush="Blue" 
                      Value="0" 
                      Maximum="100"
                      IsIndeterminate="True"  />
      </StackPanel>
      <Separator Grid.Row="2" Style="{StaticResource MaterialDesignSeparator}" Margin="0"/>
      <StackPanel x:Name="FilterOptions" Grid.Row="3" Orientation="Horizontal" 
                  IsEnabled="{Binding IsFilterToolboxEnabled}"
                  Visibility="{Binding AreFilterOptionsVisible, Mode=TwoWay, Converter={StaticResource BooleanToVisibilityConverter} }" >
         <CheckBox
            IsChecked="{Binding IncludeDebugRecords}" Margin="0,4,8,4" ToolTip="When checked, filter criteria must be satisfied. When unchecked, `Debug` records are always hidden.">
            <AccessText Text="Can Include _Debug"></AccessText>
         </CheckBox>
         <CheckBox
            IsChecked="{Binding IncludeTraceRecords}" Margin="0,4,8,4" ToolTip="When checked, filter criteria must be satisfied. When unchecked, `Trace` records are always hidden.">
            <AccessText Text="Can Include _Trace"></AccessText>
         </CheckBox>
         <CheckBox
               IsChecked="{Binding IncludePinned}" Margin="0,4,8,4" ToolTip="When checked, pinned records are always included in filter results.">
               <AccessText Text="Must Include _Pinned"></AccessText>
            </CheckBox>
            <CheckBox IsChecked="{Binding IsManualFilter}" Margin="0,4,8,4" ToolTip="When checked, the user will have to press `Enter` to apply the filters.">
               <AccessText Text="_Manual Filtering"></AccessText>
            </CheckBox>
         <CheckBox IsChecked="{Binding IsFilterCaseSensitive}" Margin="0,4,8,4" ToolTip="When checked, filters will distinguish between upper &amp; lowercase letters.">
               <AccessText Text="_Case Sensitive Filtering"></AccessText>
            </CheckBox>
      </StackPanel>
      <StatusBar Grid.Row="4"
                 Background="{StaticResource MaterialDesignPaper}" 
                 Foreground="{StaticResource TextForeground}"
                 TextElement.FontWeight="Regular"
                 TextElement.FontSize="{StaticResource TextFontSize}"
                 TextOptions.TextFormattingMode="Ideal"
                 TextOptions.TextRenderingMode="Auto">
         <StatusBar.ItemsPanel>
            <ItemsPanelTemplate>
               <Grid>
                  <Grid.ColumnDefinitions>
                     <ColumnDefinition Width="*" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
               </Grid>
            </ItemsPanelTemplate>
         </StatusBar.ItemsPanel>
         <StatusBarItem Grid.Column="0" VerticalAlignment="Center">
            <StackPanel Orientation="Horizontal">
               <Image Source="/BlueDotBrigade.Weevil.Windows;component/Resources/Icons/OpenDocument-Data-24.png" ToolTip="Current document&apos;s path."/>
               <TextBox>
                  <TextBox.Style>
                     <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource StatusBarTextBox}">
                        <Setter Property="Text" Value="{Binding SourceFilePath, Mode=OneWay}" />
                        <Setter Property="ToolTip" Value="Current document&apos;s path."/>
                        <Style.Triggers>
                           <DataTrigger Binding="{Binding SourceFilePath, Mode=OneWay}" Value="">
                              <Setter Property="Text" Value="To begin, open a document &amp; start filtering."/>
                           </DataTrigger>
                        </Style.Triggers>
                     </Style>
                  </TextBox.Style>
               </TextBox>
            </StackPanel>
         </StatusBarItem>
         <StatusBarItem Grid.Column="1" VerticalAlignment="Center">
            <StackPanel Orientation="Horizontal">
               <Image Source="/Resources/Icons/TimeElapsed-Data-24.png" ToolTip="Time elapsed between selected records."/>
               <TextBox Text="{Binding Path=ElapsedTime, Converter={StaticResource TimeSpanConverter}, Mode=OneWay}" 
                        ToolTip="Time elapsed between selected records."
                        controls:TextBoxBehavior.AutoSelectEnabled="True"
                        VerticalAlignment="Center" IsReadOnly="True" BorderThickness="0,0,0,0" Background="Transparent"/>
            </StackPanel>
         </StatusBarItem>
         <Separator Grid.Column="2" />
         <StatusBarItem Grid.Column="3" VerticalAlignment="Center">
            <StackPanel Orientation="Horizontal">
               <Image Source="/BlueDotBrigade.Weevil.Windows;component/Resources/Icons/Context-Data-24.png" 
                      ToolTip="The current document&apos;s context."/>
               <TextBox Text="{Binding Context, Converter={StaticResource ContextConverter}, FallbackValue='Unknown Context', Mode=OneWay}" 
                        ToolTip="The current document&apos;s context."
                        Style="{StaticResource StatusBarTextBox}"/>
            </StackPanel>
         </StatusBarItem>
         <StatusBarItem Grid.Column="4" VerticalAlignment="Center">
            <StackPanel Orientation="Horizontal">
            </StackPanel>
         </StatusBarItem>
         <Separator Grid.Column="5" />
         <StatusBarItem Grid.Column="6" VerticalAlignment="Center">
            <StackPanel Orientation="Horizontal">
               <Image Source="/Resources/Icons/Flagged-24.png" ToolTip="Records flagged by built-in or custom analyzers."/>
               <TextBox Text="{Binding FlaggedRecordCount, StringFormat='{}{0:###,###,##0}', FallbackValue=0, Mode=OneWay}" 
                           ToolTip="Records flagged by built-in or custom analyzers."
                           Style="{StaticResource StatusBarTextBox}"/>
            </StackPanel>
         </StatusBarItem>
         <Separator Grid.Column="7" />
         <StatusBarItem Grid.Column="8" VerticalAlignment="Center">
            <StackPanel Orientation="Horizontal">
               <Image Source="/Resources/Icons/LogEntry-Information-Data-24.png" ToolTip="Number of informational messages in filter results." />
               <TextBox Text="{Binding Metrics[Information], StringFormat='{}{0:###,###,##0}', FallbackValue=0, Mode=OneWay}" 
                             ToolTip="Number of informational messages in filter results"
                             Style="{StaticResource StatusBarTextBox}"/>
               <Image Source="/Resources/Icons/LogEntry-Warning-Data-24.png" ToolTip="Number of warning messages in filter results." />
               <TextBox Text="{Binding Metrics[Warnings], StringFormat='{}{0:###,###,##0}', FallbackValue=0, Mode=OneWay}" 
                             ToolTip="Number of warning messages in filter results."
                             Style="{StaticResource StatusBarTextBox}"/>
               <Image>
                  <Image.Style>
                     <Style TargetType="{x:Type Image}">
                        <Setter Property="Source" Value="/Resources/Icons/LogEntry-Error-DataRequiresAttention-24.png" />
                        <Setter Property="ToolTip" Value="Number of error messages in filter results."/>
                        <Style.Triggers>
                           <DataTrigger Binding="{Binding Metrics[Errors], FallbackValue=0, Mode=OneWay}" Value="0">
                              <Setter Property="Source" Value="/Resources/Icons/LogEntry-Error-Data-24.png"/>
                           </DataTrigger>
                        </Style.Triggers>
                     </Style>
                  </Image.Style>
               </Image>
               <TextBox Text="{Binding Metrics[Errors], StringFormat='{}{0:###,###,##0}', FallbackValue=0, Mode=OneWay}" 
                             ToolTip="Number of error messages in filter results."
                             Style="{StaticResource StatusBarTextBox}"/>
            </StackPanel>
         </StatusBarItem>
         <Separator Grid.Column="9" />
         <StatusBarItem Grid.Column="10">
            <StackPanel Orientation="Horizontal" >
               <Image Source="/Resources/Icons/RecordsSelected-Data-24.png" ToolTip="Number of user selected records."/>
               <TextBox Text="{Binding SelectedRecordCount, StringFormat='{}{0:###,###,##0}', FallbackValue=0, Mode=OneWay}" 
                             ToolTip="Number of user selected records."
                             Style="{StaticResource StatusBarTextBox}"/>
               <Image Source="/Resources/Icons/RecordsVisible-Data-24.png" ToolTip="Number of filter results."/>
               <TextBox Text="{Binding VisibleRecordCount, StringFormat='{}{0:###,###,##0}', FallbackValue=0, Mode=OneWay}" 
                             ToolTip="Number of filter results."
                             Style="{StaticResource StatusBarTextBox}"/>
               <Image>
                  <Image.Style>
                     <Style TargetType="{x:Type Image}">
                        <Setter Property="Source" Value="/Resources/Icons/RecordsOnDisk-Data-24.png" />
                        <Setter Property="ToolTip" Value="Total number of records in the original document."/>
                        <Style.Triggers>
                           <DataTrigger Binding="{Binding HasBeenCleared}" Value="True">
                              <Setter Property="Source" Value="/Resources/Icons/RecordsOnDisk-DataRequiresAttention-24.png"/>
                              <Setter Property="ToolTip" Value="Total number of records&#x0d;&#x0a;after a `Clear` operation was performed."/>
                           </DataTrigger>
                        </Style.Triggers>
                     </Style>
                  </Image.Style>
               </Image>
               <TextBox Text="{Binding AllRecordCount, StringFormat='{}{0:###,###,##0}', FallbackValue=0, Mode=OneWay}" >
                  <TextBox.Style>
                     <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource StatusBarTextBox}">
                        <Setter Property="ToolTip" Value="Total number of records in the original document." />
                        <Style.Triggers>
                           <DataTrigger Binding="{Binding HasBeenCleared}" Value="True">
                              <Setter Property="ToolTip" Value="Total number of records&#x0d;&#x0a;after a `Clear` operation was performed."/>
                           </DataTrigger>
                        </Style.Triggers>
                     </Style>
                  </TextBox.Style>
               </TextBox>
            </StackPanel>
         </StatusBarItem>
         <Separator Grid.Column="11" />
         <StatusBarItem Grid.Column="12">
            <StackPanel Orientation="Horizontal">
               <materialDesign:Badged Margin="10, 0">
                  <materialDesign:Badged.Style>
                     <Style TargetType="{x:Type materialDesign:Badged}">
                        <Setter Property="Badge" Value=""/>
                        <Style.Triggers>
                           <DataTrigger Binding="{Binding HasInsightNeedingAttention}" Value="true">
                              <Setter Property="Badge" Value="{Binding InsightNeedingAttention}"/>
                           </DataTrigger>
                        </Style.Triggers>
                     </Style>
                  </materialDesign:Badged.Style>
                  <Image>
                     <Image.Style>
                        <Style TargetType="{x:Type Image}">
                           <Setter Property="Source" Value="/Resources/Icons/Insight/Insight-NoData-24.png" />
                           <Setter Property="ToolTip" Value="There is no insight at this time."/>
                           <Style.Triggers>
                              <MultiDataTrigger>
                                 <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding HasInsight}" Value="True" />
                                    <Condition Binding="{Binding HasInsightNeedingAttention}" Value="False" />
                                 </MultiDataTrigger.Conditions>
                                 <Setter Property="Source" Value="/Resources/Icons/Insight/Insight-Data-24.png" />
                                 <Setter Property="ToolTip" xml:space="preserve" Value="Open the dashboard (`Ctrl+D`) for insight&#x0d;&#x0a;about the current document."/>
                           </MultiDataTrigger>
                              <MultiDataTrigger>
                                 <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding HasInsight}" Value="True" />
                                    <Condition Binding="{Binding HasInsightNeedingAttention}" Value="True" />
                                 </MultiDataTrigger.Conditions>
                                 <Setter Property="Source" Value="/Resources/Icons/Insight/Insight-DataRequiresAttention-24.png" />
                                 <Setter Property="ToolTip" xml:space="preserve" Value="The current document&apos;s insight requires user attention.&#x0d;&#x0a;For more information, open the dashboard (`Ctrl+D`)."/>
                           </MultiDataTrigger>
                           </Style.Triggers>
                        </Style>
                     </Image.Style>
                  </Image>
               </materialDesign:Badged>
               <materialDesign:PopupBox
                  StaysOpen="True"
                  Cursor="Hand" 
                  Visibility="{Binding IsUpdateAvailable, Converter={StaticResource BooleanToVisibilityConverter}}"
                  IsPopupOpen="{Binding IsChecked, ElementName=NewReleaseButton, Mode=TwoWay}">
                  <materialDesign:PopupBox.ToggleContent>
                     <Image Height="24" Width="24" 
                            Source="/Resources/Icons/NewReleaseAvailable-24.png"
                            ToolTip="New version is available! Click for details."/>
                  </materialDesign:PopupBox.ToggleContent>
                  <Grid Margin="20">
                     <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                     </Grid.ColumnDefinitions>
                     <Grid.RowDefinitions>
                        <RowDefinition Height="20"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="10"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="20"/>
                        <RowDefinition Height="Auto"/>
                     </Grid.RowDefinitions>
                     <TextBlock Grid.Column="0" Grid.Row="0" TextWrapping="Wrap" MaxWidth="300" FontSize="14">
                        <Hyperlink 
                           NavigateUri="{Binding NewReleaseDetails.ChangeLogUrl}" 
                           documents:HyperlinkBehavior.OpenInBrowser="True"
                           Foreground="{StaticResource MaterialDesignDarkForeground}">
                           <TextBlock Text="{Binding NewReleaseDetails.LatestReleaseVersion}"/>
                        </Hyperlink>
                        (&quot;
                        <TextBlock Text="{Binding NewReleaseDetails.CodeName}"/>
                        &quot;)
                     </TextBlock>
                     <TextBlock Grid.Column="0" Grid.Row="1" TextWrapping="Wrap" MaxWidth="300">
                        <TextBlock.Text>
                           <MultiBinding StringFormat="{}{0}">
                              <Binding Path="NewReleaseDetails.Description" />
                           </MultiBinding>
                        </TextBlock.Text>
                     </TextBlock>
                     <Separator Grid.Column="0" Grid.Row="2"/>
                     <TextBlock Grid.Column="0" Grid.Row="3" TextWrapping="Wrap" MaxWidth="300">
                        <Hyperlink 
                           NavigateUri="{Binding NewReleaseDetails.InstallerUrl}"
                           documents:HyperlinkBehavior.OpenInBrowser="True"
                           Foreground="{StaticResource MaterialDesignDarkForeground}">
                           <TextBlock Text="Download"/>
                        </Hyperlink>
                         the latest version now!
                     </TextBlock>
                     <Button Grid.Row="5"
                        Command="{x:Static materialDesign:PopupBox.ClosePopupCommand}"
                        Style="{StaticResource  MaterialDesignRaisedButton}"
                        Margin="{StaticResource ButtonMargin}"
                        Width="{StaticResource ButtonWidth}">
                        Close
                     </Button>
                  </Grid>
               </materialDesign:PopupBox>
            </StackPanel>
         </StatusBarItem>
         <Separator Grid.Column="13" />
         <StatusBarItem Grid.Column="14">
            <TextBox Text="{Binding CurrentHeading, Mode=OneWay}" 
                     ToolTip="Selected record is in this section of the log file."
                     Style="{StaticResource StatusBarTextBox}"/>
         </StatusBarItem>
      </StatusBar>
   </Grid>
</UserControl>